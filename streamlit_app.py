import streamlit as st
from PIL import Image
import numpy as np
import tensorflow as tf
import os
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing.image import img_to_array
from huggingface_hub import hf_hub_download
import time

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="Detector de Retinopat√≠a Diab√©tica",
    page_icon="üëÅÔ∏è",
    layout="centered"
)

# T√≠tulo y descripci√≥n
st.title("Detector de Retinopat√≠a Diab√©tica")
st.markdown("""
Esta aplicaci√≥n utiliza un modelo de aprendizaje profundo (CNN) para clasificar im√°genes
de fondo de retina y detectar posibles casos de retinopat√≠a diab√©tica.
""")

# Funci√≥n para descargar y cargar el modelo desde Hugging Face
@st.cache_resource(show_spinner=False)
def cargar_modelo():
    """Descarga y carga el modelo CNN desde Hugging Face Hub"""
    try:
        # Crear directorio para el modelo si no existe
        os.makedirs("modelo", exist_ok=True)
        
        # Informaci√≥n de Hugging Face Hub
        repo_id = "Ruthzen/RDCNN"
        filename = "best_model.h5"
        
        # Mostrar informaci√≥n sobre la descarga
        with st.spinner(f"Descargando modelo desde {repo_id}..."):
            # Descargar modelo
            model_path = hf_hub_download(
                repo_id=repo_id,
                filename=filename,
                cache_dir="modelo",
                force_download=True  # Forzar descarga para evitar problemas de cach√©
            )
            
            # Cargar el modelo
            model = load_model(model_path)
            return model, None
    except Exception as e:
        return None, str(e)

# Funci√≥n para preprocesar la imagen
def preprocesar_imagen(imagen):
    """Preprocesa la imagen para que sea compatible con el modelo CNN"""
    # Redimensionar la imagen al tama√±o que espera el modelo
    imagen = imagen.resize((224, 224))
    
    # Convertir a array y normalizar
    img_array = img_to_array(imagen)
    img_array = np.expand_dims(img_array, axis=0)
    img_array = img_array / 255.0  # Normalizaci√≥n
    
    return img_array

# Funci√≥n para realizar la predicci√≥n
def predecir_retinopatia(modelo, imagen_preprocesada):
    """Realiza la predicci√≥n usando el modelo cargado"""
    prediccion = modelo.predict(imagen_preprocesada)
    return prediccion

# Secci√≥n de carga del modelo
with st.expander("Estado del modelo", expanded=True):
    st.write("Verificando disponibilidad del modelo...")
    modelo, error = cargar_modelo()
    
    if modelo is not None:
        st.success("‚úÖ Modelo disponible y listo para usar")
        # Mostrar informaci√≥n b√°sica del modelo
        st.write("Informaci√≥n del modelo:")
        st.code(f"Capas: {len(modelo.layers)}")
        st.code(f"Forma de entrada: {modelo.input_shape}")
        st.code(f"Forma de salida: {modelo.output_shape}")
        modelo_disponible = True
    else:
        st.error(f"‚ùå Error al cargar el modelo: {error}")
        st.error(f"Detalles: Intentando cargar desde Ruthzen/RDCNN, archivo best_model.h5")
        st.info("Nota: Aseg√∫rate de que el archivo 'best_model.h5' existe en tu repositorio de Hugging Face.")
        modelo_disponible = False

# Interfaz para subir archivos
st.subheader("Subir imagen de fondo de retina")
imagen_subida = st.file_uploader("Selecciona una imagen de fondo de retina", type=["jpg", "jpeg", "png"])

# Si se ha subido una imagen
if imagen_subida is not None:
    # Mostrar la imagen subida
    imagen = Image.open(imagen_subida)
    st.image(imagen, caption="Imagen subida", use_column_width=True)
    
    # Bot√≥n para analizar la imagen
    if st.button("Analizar imagen"):
        if modelo_disponible:
            with st.spinner("Analizando imagen..."):
                # Simular tiempo de procesamiento (opcional)
                time.sleep(1)
                
                # Preprocesar la imagen
                imagen_preprocesada = preprocesar_imagen(imagen)
                
                # Realizar predicci√≥n
                resultado = predecir_retinopatia(modelo, imagen_preprocesada)
                
                # Interpretar resultado (asumiendo que es un modelo binario)
                probabilidad = resultado[0][0]
                
                # Mostrar resultado
                st.subheader("Resultado del an√°lisis")
                
                col1, col2 = st.columns(2)
                
                with col1:
                    if probabilidad > 0.5:
                        st.error(f"Retinopat√≠a diab√©tica detectada")
                        st.metric("Probabilidad", f"{probabilidad:.2%}")
                    else:
                        st.success(f"No se detecta retinopat√≠a diab√©tica")
                        st.metric("Confianza", f"{1-probabilidad:.2%}")
                
                with col2:
                    # Visualizaci√≥n de la probabilidad
                    st.write("Nivel de confianza:")
                    st.progress(float(probabilidad))
                
                # Consejos adicionales
                st.info("Este an√°lisis es preliminar y no sustituye el diagn√≥stico m√©dico profesional. Consulte a un oftalm√≥logo para una evaluaci√≥n completa.")
        else:
            st.error("No se puede realizar el an√°lisis porque el modelo no est√° disponible.")
            st.info("Intenta recargar la p√°gina o verifica la configuraci√≥n del modelo.")

# Informaci√≥n adicional
st.markdown("---")
st.subheader("Sobre esta aplicaci√≥n")
st.markdown("""
Esta aplicaci√≥n utiliza un modelo de Redes Neuronales Convolucionales (CNN) entrenado para 
detectar signos de retinopat√≠a diab√©tica en im√°genes de fondo de retina.

La retinopat√≠a diab√©tica es una complicaci√≥n de la diabetes que afecta a los ojos y puede 
llevar a la p√©rdida de visi√≥n si no se detecta y trata a tiempo.
""")

# Sidebar con informaci√≥n adicional
with st.sidebar:
    st.title("Informaci√≥n")
    st.info("""
    **¬øQu√© es la retinopat√≠a diab√©tica?**
    
    La retinopat√≠a diab√©tica es una complicaci√≥n de la diabetes que da√±a los vasos sangu√≠neos en la retina (la capa sensible a la luz en la parte posterior del ojo).
    
    **S√≠ntomas comunes:**
    - Visi√≥n borrosa o fluctuante
    - √Åreas oscuras o vac√≠as en el campo visual
    - Dificultad para percibir colores
    - P√©rdida de visi√≥n
    
    **Prevenci√≥n:**
    - Control regular de la glucosa en sangre
    - Mantener la presi√≥n arterial y los niveles de colesterol bajo control
    - Ex√°menes oculares regulares
    - Estilo de vida saludable
    """)
    
    st.warning("""
    **Aviso importante:**
    
    Esta herramienta es solo para fines educativos e informativos. No sustituye el diagn√≥stico profesional. Consulte siempre a un profesional de la salud.
    """)
    
    st.write("Desarrollado con ‚ù§Ô∏è usando Streamlit y TensorFlow")
