import streamlit as st
import tensorflow as tf
import numpy as np
from PIL import Image
from tensorflow.keras.preprocessing.image import img_to_array
import matplotlib.pyplot as plt
import os
import requests
from io import BytesIO
import traceback

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="Herramienta Diagn√≥stica de Im√°genes M√©dicas",
    page_icon="ü©∫",
    layout="wide"
)

# ==========================================
# FUNCIONES DE DIAGN√ìSTICO DE MODELO
# ==========================================

def verificar_modelo(ruta_modelo, mostrar_info=True):
    """Verificar si un modelo puede cargarse correctamente y mostrar diagn√≥stico"""
    resultados = {
        "exito": False,
        "error": None,
        "tipo": None,
        "num_capas": None,
        "resumen": None,
        "tamano_archivo": None,
        "mensaje": ""
    }
    
    # Verificar si el archivo existe
    if not os.path.exists(ruta_modelo):
        resultados["error"] = f"El archivo {ruta_modelo} no existe"
        resultados["mensaje"] = f"‚ùå Error: El archivo {ruta_modelo} no existe"
        return resultados
    
    # Verificar tama√±o
    tamano = os.path.getsize(ruta_modelo) / (1024*1024)  # En MB
    resultados["tamano_archivo"] = tamano
    
    if tamano < 1:
        resultados["error"] = f"El archivo es muy peque√±o ({tamano:.2f} MB)"
        resultados["mensaje"] = f"‚ùå Error: El archivo es demasiado peque√±o ({tamano:.2f} MB)"
        return resultados
    
    # Intentar cargar el modelo
    try:
        # M√©todo 1: Carga est√°ndar
        modelo = tf.keras.models.load_model(ruta_modelo)
        
        # Si llegamos aqu√≠, la carga fue exitosa
        resultados["exito"] = True
        resultados["tipo"] = str(type(modelo))
        resultados["num_capas"] = len(modelo.layers) if hasattr(modelo, 'layers') else "N/A"
        
        # Capturar el resumen del modelo como string
        import io
        resumen_buffer = io.StringIO()
        modelo.summary(print_fn=lambda x: resumen_buffer.write(x + '\n'))
        resultados["resumen"] = resumen_buffer.getvalue()
        
        resultados["mensaje"] = f"‚úÖ Modelo cargado correctamente: {tamano:.2f} MB, {resultados['num_capas']} capas"
        
    except Exception as e:
        # Capturar el error detallado
        resultados["error"] = str(e)
        resultados["mensaje"] = f"‚ùå Error al cargar: {str(e)}"
        
        # Intentar con opciones alternativas
        try:
            # M√©todo 2: Deshabilitar compilaci√≥n
            modelo = tf.keras.models.load_model(ruta_modelo, compile=False)
            resultados["exito"] = True
            resultados["tipo"] = str(type(modelo))
            resultados["num_capas"] = len(modelo.layers) if hasattr(modelo, 'layers') else "N/A"
            resultados["mensaje"] = f"‚úÖ Modelo cargado sin compilaci√≥n: {tamano:.2f} MB, {resultados['num_capas']} capas"
        except Exception as e2:
            # Agregar error del segundo intento
            resultados["error"] += f"\n\nSegundo intento (sin compilaci√≥n): {str(e2)}"
            
            # Verificar si es un SavedModel directory
            if os.path.isdir(ruta_modelo):
                try:
                    # M√©todo 3: Cargar como SavedModel
                    modelo = tf.saved_model.load(ruta_modelo)
                    resultados["exito"] = True
                    resultados["tipo"] = str(type(modelo))
                    resultados["mensaje"] = f"‚úÖ Cargado como SavedModel: {tamano:.2f} MB"
                except Exception as e3:
                    resultados["error"] += f"\n\nTercer intento (SavedModel): {str(e3)}"
    
    # Mostrar los resultados en la interfaz si se solicita
    if mostrar_info:
        if resultados["exito"]:
            st.success(resultados["mensaje"])
            with st.expander("Ver detalles del modelo"):
                st.write(f"**Tipo:** {resultados['tipo']}")
                st.write(f"**Tama√±o:** {tamano:.2f} MB")
                st.write(f"**N√∫mero de capas:** {resultados['num_capas']}")
                if resultados["resumen"]:
                    st.text(resultados["resumen"])
        else:
            st.error(resultados["mensaje"])
            with st.expander("Ver detalles del error"):
                st.code(resultados["error"])
    
    return resultados

def descargar_modelo_desde_url(url, destino='best_model.keras'):
    """Descargar el modelo desde una URL directa"""
    try:
        st.info(f"Descargando modelo desde: {url}")
        
        # Crear barra de progreso
        progress_bar = st.progress(0)
        
        # Descargar con requests
        response = requests.get(url, stream=True)
        if response.status_code != 200:
            st.error(f"Error al descargar: c√≥digo {response.status_code}")
            return False
            
        # Obtener tama√±o total si est√° disponible
        total_size = int(response.headers.get('content-length', 0))
        block_size = 1024  # 1 KB
        
        # Guardar el archivo mientras se descarga
        with open(destino, 'wb') as file:
            if total_size == 0:  # No se conoce el tama√±o
                file.write(response.content)
                progress_bar.progress(1.0)
            else:
                downloaded = 0
                for data in response.iter_content(block_size):
                    file.write(data)
                    downloaded += len(data)
                    progress = min(1.0, downloaded / total_size)
                    progress_bar.progress(progress)
        
        # Verificar que se haya guardado correctamente
        if os.path.exists(destino) and os.path.getsize(destino) > 1000:  # Al menos 1KB
            st.success(f"‚úÖ Modelo descargado correctamente: {os.path.getsize(destino)/1024/1024:.2f} MB")
            
            # Verificar el modelo descargado
            st.write("Verificando el modelo descargado...")
            verificar_modelo(destino)
            
            return True
        else:
            st.error("‚ùå Error: el archivo descargado parece estar incompleto o corrupto")
            return False
            
    except Exception as e:
        st.error(f"‚ùå Error durante la descarga: {str(e)}")
        return False

@st.cache_resource
def cargar_modelo_tensorflow(ruta_modelo):
    """Cargar el modelo desde archivo con cach√©"""
    try:
        modelo = tf.keras.models.load_model(ruta_modelo)
        return modelo
    except Exception as e:
        st.error(f"‚ùå Error al cargar el modelo: {str(e)}")
        return None

def crear_modelo_dummy():
    """Crear un modelo simple para pruebas cuando no se puede cargar el modelo real"""
    from tensorflow.keras.models import Sequential
    from tensorflow.keras.layers import Dense, Flatten, Conv2D, MaxPooling2D
    
    # Crear un modelo CNN simple
    modelo = Sequential([
        Conv2D(16, (3, 3), activation='relu', input_shape=(256, 256, 3)),
        MaxPooling2D(2, 2),
        Conv2D(32, (3, 3), activation='relu'),
        MaxPooling2D(2, 2),
        Flatten(),
        Dense(64, activation='relu'),
        Dense(1, activation='sigmoid')
    ])
    
    # Compilar el modelo
    modelo.compile(optimizer='adam',
                  loss='binary_crossentropy',
                  metrics=['accuracy'])
    
    st.warning("‚ö†Ô∏è USANDO MODELO DE PRUEBA - NO PARA USO REAL")
    st.info("Este es un modelo de demostraci√≥n simple sin entrenamiento real")
    
    return modelo

# ==========================================
# FUNCIONES DE DIAGN√ìSTICO Y AN√ÅLISIS
# ==========================================

def preprocesar_imagen(imagen, tamano_objetivo=(256, 256)):
    """Preprocesar la imagen para la predicci√≥n del modelo"""
    # Redimensionar al tama√±o objetivo
    imagen = imagen.resize(tamano_objetivo)
    # Convertir a array y normalizar
    array_img = img_to_array(imagen)
    array_img = array_img / 255.0
    # Expandir dimensiones para el lote
    array_img = np.expand_dims(array_img, axis=0)
    return array_img

def predecir_imagen(modelo, array_img, nombres_clases):
    """Realizar predicci√≥n en la imagen"""
    prediccion = modelo.predict(array_img)
    clase_predicha = int(np.round(prediccion[0][0]))
    probabilidad = prediccion[0][0] if clase_predicha == 1 else 1 - prediccion[0][0]
    
    return {
        'clase': nombres_clases[clase_predicha],
        'probabilidad': float(probabilidad),
        'prediccion_bruta': float(prediccion[0][0])
    }

def crear_visualizacion_resultado(resultado, imagen, nombres_clases):
    """Crear una representaci√≥n visual del resultado diagn√≥stico"""
    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 6), gridspec_kw={'width_ratios': [1, 1]})
    
    # Mostrar la imagen
    ax1.imshow(imagen)
    ax1.set_title("Imagen Analizada")
    ax1.axis('off')
    
    # Crear la visualizaci√≥n del resultado diagn√≥stico
    # Gr√°fico vac√≠o con texto
    ax2.axis('off')
    
    # Determinar el color del resultado basado en la predicci√≥n
    color_resultado = 'green' if resultado['clase'] == nombres_clases[0] else 'red'
    confianza = resultado['probabilidad'] * 100
    
    # Mostrar informaci√≥n diagn√≥stica
    ax2.text(0.5, 0.8, f"RESULTADO DEL DIAGN√ìSTICO", 
             ha='center', va='center', fontsize=18, fontweight='bold')
    
    ax2.text(0.5, 0.6, f"{resultado['clase']}", 
             ha='center', va='center', color=color_resultado, fontsize=24, fontweight='bold')
    
    ax2.text(0.5, 0.4, f"Confianza: {confianza:.1f}%", 
             ha='center', va='center', fontsize=16)
    
    # A√±adir un cuadro coloreado basado en el resultado
    rect = plt.Rectangle((0.1, 0.2), 0.8, 0.6, fill=True, color=color_resultado, alpha=0.1)
    ax2.add_patch(rect)
    
    plt.tight_layout()
    return fig

# ==========================================
# INTERFAZ PRINCIPAL DE LA APLICACI√ìN
# ==========================================

st.title("ü©∫ Herramienta Diagn√≥stica de Im√°genes M√©dicas")
st.write("Suba una imagen m√©dica para recibir un diagn√≥stico automatizado usando nuestro modelo de IA")

# Barra lateral para configuraci√≥n
with st.sidebar:
    st.header("Configuraci√≥n")
    
    # Nombres de las clases
    st.subheader("Nombres de las clases")
    clase_0 = st.text_input("Nombre de clase negativa", "Normal")
    clase_1 = st.text_input("Nombre de clase positiva", "Anormal")
    nombres_clases = [clase_0, clase_1]
    
    # Opciones avanzadas
    st.subheader("Opciones avanzadas")
    usar_modelo_dummy = st.checkbox("Usar modelo de prueba", value=False, 
                               help="Activa esta opci√≥n si tienes problemas para cargar el modelo real")
    
    # URL del modelo (configurable)
    model_url = st.text_input(
        "URL del modelo", 
        # REEMPLAZA ESTA URL CON LA DE TU MODELO EN GITHUB RELEASES
        "https://github.com/ViannyCruz/SD-AI/releases/download/tag01/best_model.keras",
        help="URL directa para descargar el modelo"
    )
    
    # Modo diagn√≥stico
    st.subheader("Diagn√≥stico")
    modo_diagnostico = st.checkbox("Activar modo diagn√≥stico", value=True, 
                                  help="Muestra informaci√≥n detallada sobre el estado del modelo")
    
    # Caja de informaci√≥n
    st.info("""
    Esta aplicaci√≥n utiliza un modelo de aprendizaje profundo para analizar im√°genes m√©dicas.
    
    El modelo ha sido entrenado en un conjunto de datos de im√°genes m√©dicas para detectar anomal√≠as.
    
    Para mejores resultados, suba im√°genes claras en formato JPG, PNG o TIFF.
    """)
    
    # Informaci√≥n del modelo
    with st.expander("Acerca del Modelo"):
        st.write("""
        El modelo utilizado en esta aplicaci√≥n es una Red Neuronal Convolucional (CNN) 
        entrenada para la clasificaci√≥n binaria de im√°genes m√©dicas.
        
        Fue entrenado utilizando validaci√≥n cruzada de 5 pliegues para asegurar robustez 
        y utiliza aumento de datos para mejorar la generalizaci√≥n.
        
        El modelo logr√≥:
        - Precisi√≥n: ~85-90%
        - Sensibilidad: ~85%
        - Especificidad: ~88%
        
        Nota: Esta herramienta est√° destinada a asistir en el diagn√≥stico y 
        no debe reemplazar el consejo m√©dico profesional.
        """)

# ==========================================
# SECCI√ìN DE DIAGN√ìSTICO DE MODELO
# ==========================================

if modo_diagnostico:
    st.header("üîç Diagn√≥stico del Modelo")
    
    # Ruta al modelo
    modelo_path = 'best_model.keras'
    
    # Crear pesta√±as para organizar las opciones de diagn√≥stico
    tab1, tab2, tab3 = st.tabs(["Verificaci√≥n de modelo", "Descarga manual", "Modelo de prueba"])
    
    with tab1:
        st.subheader("Verificar modelo existente")
        
        # Verificar si el modelo ya existe
        if os.path.exists(modelo_path):
            st.info(f"Modelo encontrado: {modelo_path}")
            if st.button("Verificar modelo existente"):
                verificar_modelo(modelo_path)
        else:
            st.warning(f"No se encontr√≥ el archivo {modelo_path} en el directorio")
        
        # Verificar URL del modelo
        st.subheader("Descargar y verificar modelo")
        if st.button("Descargar y verificar modelo"):
            descarga_ok = descargar_modelo_desde_url(model_url, modelo_path)
            
    with tab2:
        st.subheader("Subida manual del modelo")
        st.write("Si tienes problemas con la descarga autom√°tica, puedes subir el modelo manualmente:")
        
        uploaded_model = st.file_uploader("Subir archivo del modelo", type=["h5", "keras"])
        
        if uploaded_model is not None:
            # Guardar el archivo subido
            with open(modelo_path, "wb") as f:
                f.write(uploaded_model.getbuffer())
            
            # Verificar el modelo subido
            st.write("Verificando el modelo subido...")
            resultado_verificacion = verificar_modelo(modelo_path)
    
    with tab3:
        st.subheader("Modelo de prueba")
        st.write("Puedes usar un modelo de prueba para verificar la funcionalidad de la aplicaci√≥n:")
        
        if st.button("Crear y verificar modelo de prueba"):
            # Crear modelo dummy
            dummy_model = crear_modelo_dummy()
            
            # Guardar modelo dummy para verificaci√≥n
            dummy_path = "modelo_prueba.h5"
            dummy_model.save(dummy_path)
            
            # Verificar
            st.write("Verificando modelo de prueba:")
            verificar_modelo(dummy_path)

# ==========================================
# GESTI√ìN DEL MODELO
# ==========================================

# Ruta al modelo
modelo_path = 'best_model.keras'

# Determinar si se debe usar el modelo dummy
if usar_modelo_dummy:
    modelo = crear_modelo_dummy()
    modelo_cargado = True
else:
    modelo_cargado = False
    
    # Verificar si ya existe un modelo local
    if os.path.exists(modelo_path):
        st.info(f"Usando modelo existente: {modelo_path}")
        modelo = cargar_modelo_tensorflow(modelo_path)
        if modelo is not None:
            modelo_cargado = True
            st.success("‚úÖ Modelo cargado exitosamente")
        else:
            st.warning("‚ö†Ô∏è Modelo existente no v√°lido")
            if modo_diagnostico:
                st.write("Ejecutando diagn√≥stico del modelo...")
                verificar_modelo(modelo_path)
    
    # Si no hay modelo v√°lido, mostrar opciones
    if not modelo_cargado and not modo_diagnostico:
        col1, col2 = st.columns(2)
        
        with col1:
            if st.button("Descargar modelo", type="primary"):
                descarga_ok = descargar_modelo_desde_url(model_url, modelo_path)
                if descarga_ok:
                    modelo = cargar_modelo_tensorflow(modelo_path)
                    if modelo is not None:
                        modelo_cargado = True
                        st.success("‚úÖ Modelo cargado exitosamente")
                    else:
                        st.error("‚ùå No se pudo cargar el modelo descargado")
                        verificar_modelo(modelo_path)
        
        with col2:
            st.write("O suba el modelo manualmente:")
            uploaded_model = st.file_uploader("Subir archivo del modelo", type=["h5", "keras"], key="uploader_main")
            
            if uploaded_model is not None:
                # Guardar el archivo subido
                with open(modelo_path, "wb") as f:
                    f.write(uploaded_model.getbuffer())
                
                # Intentar cargar el modelo subido
                modelo = cargar_modelo_tensorflow(modelo_path)
                if modelo is not None:
                    modelo_cargado = True
                    st.success("‚úÖ Modelo cargado exitosamente desde archivo subido")
                else:
                    st.error("‚ùå El archivo subido no es un modelo v√°lido")
                    verificar_modelo(modelo_path)

# ==========================================
# AREA PRINCIPAL DE AN√ÅLISIS DE IM√ÅGENES
# ==========================================

if not modo_diagnostico:
    st.header("üìä An√°lisis de Im√°genes")

# Crear un widget para subir archivos
archivo_subido = st.file_uploader("Subir una imagen m√©dica", type=["jpg", "jpeg", "png", "tif", "tiff"])

# Si se sube un archivo
if archivo_subido is not None:
    # Cargar y mostrar la imagen
    imagen = Image.open(archivo_subido)
    st.image(imagen, caption="Imagen Subida", use_column_width=True)
    
    # Solo permitir diagn√≥stico si hay un modelo cargado
    if modelo_cargado:
        # A√±adir un bot√≥n para ejecutar el diagn√≥stico
        boton_diagnostico = st.button("Ejecutar Diagn√≥stico", type="primary")
        
        if boton_diagnostico:
            try:
                with st.spinner("Analizando imagen..."):
                    # Preprocesar la imagen
                    array_img = preprocesar_imagen(imagen)
                    
                    # Hacer predicci√≥n
                    resultado = predecir_imagen(modelo, array_img, nombres_clases)
                    
                    # Mostrar resultado diagn√≥stico
                    st.subheader("Resultado Diagn√≥stico")
                    
                    # Crear un cuadro coloreado para el resultado con CSS personalizado
                    color_resultado = "green" if resultado['clase'] == nombres_clases[0] else "red"
                    confianza = resultado['probabilidad'] * 100
                    
                    st.markdown(f"""
                    <div style="padding: 20px; 
                                border-radius: 10px; 
                                background-color: {color_resultado}15; 
                                border: 2px solid {color_resultado};">
                        <h2 style="text-align: center; color: {color_resultado};">{resultado['clase']}</h2>
                        <p style="text-align: center; font-size: 18px;">Confianza: {confianza:.1f}%</p>
                    </div>
                    """, unsafe_allow_html=True)
                    
                    # Crear visualizaci√≥n
                    fig = crear_visualizacion_resultado(resultado, imagen, nombres_clases)
                    st.pyplot(fig)
                    
                    # Mostrar detalles t√©cnicos adicionales en un expansor
                    with st.expander("Detalles T√©cnicos"):
                        st.json({
                            "Clase Predicha": resultado['clase'],
                            "Confianza": f"{resultado['probabilidad']:.4f}",
                            "Salida Bruta del Modelo": resultado['prediccion_bruta']
                        })
            except Exception as e:
                st.error(f"Error durante la predicci√≥n: {str(e)}")
                st.code(traceback.format_exc())
    else:
        st.warning("‚ö†Ô∏è Primero debe cargar un modelo para realizar diagn√≥sticos")

else:
    # Mostrar mensaje de instrucci√≥n cuando no se sube ning√∫n archivo
    st.info("Por favor, suba una imagen para comenzar.")
    
    # A√±adir una imagen de demostraci√≥n (opcional)
    if not modo_diagnostico:
        st.markdown("### Vista Previa de Resultado de Muestra")
        st.image("https://via.placeholder.com/800x400.png?text=Ejemplo+de+Resultado+Diagn√≥stico", 
                caption="Ejemplo de visualizaci√≥n de diagn√≥stico (suba una imagen para ver sus resultados)")

# Pie de p√°gina
st.markdown("---")
st.markdown("Herramienta Diagn√≥stica de Im√°genes M√©dicas | Desarrollado con TensorFlow")
